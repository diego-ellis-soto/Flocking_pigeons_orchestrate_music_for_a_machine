{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "064161ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n",
    "#\n",
    "# Animal Opera Recisited\n",
    "#\n",
    "# Written by: Diego Ellis Soto, Jonathan Koss, Douglas Duhaime\n",
    "#\n",
    "# Contact: diego.ellissoto@yale.edu\n",
    "#\n",
    "# The aim of this script is a data sonification of animal collective behavior data\n",
    "#\n",
    "#\n",
    "#\n",
    "# --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n",
    "\n",
    "# Load packages and necessary data (ind represents individual animal data, col is collective level parameters)\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from IPython.display import HTML\n",
    "from matplotlib.animation import FuncAnimation\n",
    "from collections import namedtuple\n",
    "import matplotlib.pyplot as plt\n",
    "import threading\n",
    "import random\n",
    "import pygame\n",
    "import mido\n",
    "import math\n",
    "import os\n",
    "import rtmidi\n",
    "from sklearn.cluster import KMeans\n",
    "# from collections import defaultdicta\n",
    "\n",
    "#col = pd.read_csv('/Users/diegoellis/projects/Proposals_funding/Yale_internal_grants/Franke_program/CCAM_Music_migration/Data/Pol_Rot_datasets/Pigeon_Nagy_hf_rotation_polarizaiton_group_data.csv')\n",
    "\n",
    "# the numpy array 'allparticles' contains results stored as:\n",
    "# [timestep, particle, quantity] The different quantities are: x, y, vx, vy, spd, ang, angvel, stopgo, state\n",
    "\n",
    "\n",
    "# Set the domain based on the full data:\n",
    "ind = pd.read_csv('/Users/diegoellis/projects/Proposals_funding/Yale_internal_grants/Franke_program/CCAM_Music_migration/Data/Pol_Rot_datasets/Termite_rotation_polarizaiton_full-data.csv')\n",
    "# ind = pd.read_csv('Termite_rotation_polarizaiton_full-data.csv')\n",
    "\n",
    "ind.head()\n",
    "# Numpy array\n",
    "# United timesteps, number of individuals, 2D thing (Longitude/Latitude)\n",
    "\n",
    "# ind.shape\n",
    "\n",
    "animals_array = ind['id'].unique()\n",
    "times_array = ind['frame'].unique()\n",
    "\n",
    "total_array = np.zeros((times_array.size, animals_array.size,3))\n",
    "ind_numpy = ind[['id','frame','centroid_x','centroid_y','speed']]\n",
    "ind_numpy = ind_numpy.to_numpy()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3f20be1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>frame</th>\n",
       "      <th>pos_x</th>\n",
       "      <th>pos_y</th>\n",
       "      <th>id</th>\n",
       "      <th>plotting</th>\n",
       "      <th>dir_x</th>\n",
       "      <th>dir_y</th>\n",
       "      <th>speed</th>\n",
       "      <th>centroid_x</th>\n",
       "      <th>centroid_y</th>\n",
       "      <th>group_dir_x</th>\n",
       "      <th>group_dir_y</th>\n",
       "      <th>group_speed</th>\n",
       "      <th>centroid_disp_x</th>\n",
       "      <th>centroid_disp_y</th>\n",
       "      <th>rotation</th>\n",
       "      <th>t_</th>\n",
       "      <th>seconds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>627.738315</td>\n",
       "      <td>197.156365</td>\n",
       "      <td>A</td>\n",
       "      <td>False</td>\n",
       "      <td>-0.963318</td>\n",
       "      <td>-0.268362</td>\n",
       "      <td>0.074514</td>\n",
       "      <td>952.204874</td>\n",
       "      <td>707.955729</td>\n",
       "      <td>-0.264331</td>\n",
       "      <td>0.36508</td>\n",
       "      <td>7.495956</td>\n",
       "      <td>-0.536184</td>\n",
       "      <td>-0.844101</td>\n",
       "      <td>-0.669247</td>\n",
       "      <td>4</td>\n",
       "      <td>0.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1054.989501</td>\n",
       "      <td>424.456201</td>\n",
       "      <td>B</td>\n",
       "      <td>False</td>\n",
       "      <td>-0.897696</td>\n",
       "      <td>0.440615</td>\n",
       "      <td>0.011146</td>\n",
       "      <td>952.204874</td>\n",
       "      <td>707.955729</td>\n",
       "      <td>-0.264331</td>\n",
       "      <td>0.36508</td>\n",
       "      <td>7.495956</td>\n",
       "      <td>0.340846</td>\n",
       "      <td>-0.940119</td>\n",
       "      <td>-0.693759</td>\n",
       "      <td>4</td>\n",
       "      <td>0.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>507.090618</td>\n",
       "      <td>706.186679</td>\n",
       "      <td>C</td>\n",
       "      <td>False</td>\n",
       "      <td>0.532187</td>\n",
       "      <td>0.846627</td>\n",
       "      <td>0.213513</td>\n",
       "      <td>952.204874</td>\n",
       "      <td>707.955729</td>\n",
       "      <td>-0.264331</td>\n",
       "      <td>0.36508</td>\n",
       "      <td>7.495956</td>\n",
       "      <td>-0.999992</td>\n",
       "      <td>-0.003974</td>\n",
       "      <td>-0.844505</td>\n",
       "      <td>4</td>\n",
       "      <td>0.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1271.138879</td>\n",
       "      <td>744.371058</td>\n",
       "      <td>D</td>\n",
       "      <td>False</td>\n",
       "      <td>-0.207396</td>\n",
       "      <td>0.978257</td>\n",
       "      <td>13.109743</td>\n",
       "      <td>952.204874</td>\n",
       "      <td>707.955729</td>\n",
       "      <td>-0.264331</td>\n",
       "      <td>0.36508</td>\n",
       "      <td>7.495956</td>\n",
       "      <td>0.993545</td>\n",
       "      <td>0.113441</td>\n",
       "      <td>0.995469</td>\n",
       "      <td>4</td>\n",
       "      <td>0.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>1378.624021</td>\n",
       "      <td>738.352216</td>\n",
       "      <td>E</td>\n",
       "      <td>False</td>\n",
       "      <td>-0.111141</td>\n",
       "      <td>0.993805</td>\n",
       "      <td>1.266432</td>\n",
       "      <td>952.204874</td>\n",
       "      <td>707.955729</td>\n",
       "      <td>-0.264331</td>\n",
       "      <td>0.36508</td>\n",
       "      <td>7.495956</td>\n",
       "      <td>0.997469</td>\n",
       "      <td>0.071103</td>\n",
       "      <td>0.999192</td>\n",
       "      <td>4</td>\n",
       "      <td>0.133333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  frame        pos_x       pos_y id  plotting     dir_x  \\\n",
       "0           1      4   627.738315  197.156365  A     False -0.963318   \n",
       "1           2      4  1054.989501  424.456201  B     False -0.897696   \n",
       "2           3      4   507.090618  706.186679  C     False  0.532187   \n",
       "3           4      4  1271.138879  744.371058  D     False -0.207396   \n",
       "4           5      4  1378.624021  738.352216  E     False -0.111141   \n",
       "\n",
       "      dir_y      speed  centroid_x  centroid_y  group_dir_x  group_dir_y  \\\n",
       "0 -0.268362   0.074514  952.204874  707.955729    -0.264331      0.36508   \n",
       "1  0.440615   0.011146  952.204874  707.955729    -0.264331      0.36508   \n",
       "2  0.846627   0.213513  952.204874  707.955729    -0.264331      0.36508   \n",
       "3  0.978257  13.109743  952.204874  707.955729    -0.264331      0.36508   \n",
       "4  0.993805   1.266432  952.204874  707.955729    -0.264331      0.36508   \n",
       "\n",
       "   group_speed  centroid_disp_x  centroid_disp_y  rotation  t_   seconds  \n",
       "0     7.495956        -0.536184        -0.844101 -0.669247   4  0.133333  \n",
       "1     7.495956         0.340846        -0.940119 -0.693759   4  0.133333  \n",
       "2     7.495956        -0.999992        -0.003974 -0.844505   4  0.133333  \n",
       "3     7.495956         0.993545         0.113441  0.995469   4  0.133333  \n",
       "4     7.495956         0.997469         0.071103  0.999192   4  0.133333  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ind.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "113e0703",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[[6.27738315e+02, 1.97156365e+02, 7.45138267e-02],\n",
       "        [1.05498950e+03, 4.24456201e+02, 1.11461270e-02],\n",
       "        [5.07090618e+02, 7.06186679e+02, 2.13512663e-01],\n",
       "        ...,\n",
       "        [1.07945783e+03, 9.23144647e+02, 2.03360057e+01],\n",
       "        [7.29277802e+02, 9.54754394e+02, 4.61964371e+00],\n",
       "        [9.69322027e+02, 9.75224274e+02, 2.03366516e+01]],\n",
       "\n",
       "       [[6.27703313e+02, 1.97184456e+02, 4.48794448e-02],\n",
       "        [1.05500247e+03, 4.24480842e+02, 2.78440117e-02],\n",
       "        [5.07129808e+02, 7.06115278e+02, 8.14495837e-02],\n",
       "        ...,\n",
       "        [1.06454536e+03, 9.30577288e+02, 1.66621151e+01],\n",
       "        [7.25567751e+02, 9.53380307e+02, 3.95633640e+00],\n",
       "        [9.80421834e+02, 9.72058515e+02, 1.15424326e+01]],\n",
       "\n",
       "       [[6.27000000e+02, 1.96000000e+02, 1.37752859e+00],\n",
       "        [1.05500000e+03, 4.28000000e+02, 3.51915890e+00],\n",
       "        [5.07000000e+02, 7.11000000e+02, 4.88644669e+00],\n",
       "        ...,\n",
       "        [1.05900000e+03, 9.34000000e+02, 6.51659010e+00],\n",
       "        [7.19000000e+02, 9.55000000e+02, 6.76452171e+00],\n",
       "        [1.00000000e+03, 9.72000000e+02, 1.95782534e+01]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[1.03173527e+03, 9.49773975e+02, 7.98436009e+00],\n",
       "        [           nan,            nan, 0.00000000e+00],\n",
       "        [4.98142842e+02, 6.44899000e+02, 4.43847448e-01],\n",
       "        ...,\n",
       "        [4.92416069e+02, 5.51293758e+02, 9.40481713e-01],\n",
       "        [6.23429167e+02, 3.36510354e+02, 2.19553031e+01],\n",
       "        [5.60113240e+02, 8.12685250e+02, 1.58370488e-01]],\n",
       "\n",
       "       [[1.04079694e+03, 9.40422028e+02, 1.30220097e+01],\n",
       "        [           nan,            nan, 0.00000000e+00],\n",
       "        [4.97982331e+02, 6.45135208e+02, 2.85583475e-01],\n",
       "        ...,\n",
       "        [4.92202847e+02, 5.51884539e+02, 6.28081123e-01],\n",
       "        [6.28972671e+02, 3.21169489e+02, 1.63117307e+01],\n",
       "        [5.60365825e+02, 8.12560197e+02, 2.81846168e-01]],\n",
       "\n",
       "       [[1.04700926e+03, 9.33321325e+02, 9.43466636e+00],\n",
       "        [           nan,            nan, 0.00000000e+00],\n",
       "        [4.97032062e+02, 6.46804043e+02, 1.92042262e+00],\n",
       "        ...,\n",
       "        [4.92115487e+02, 5.51985813e+02, 1.33746562e-01],\n",
       "        [6.35476003e+02, 3.12031164e+02, 1.12161631e+01],\n",
       "        [5.60192230e+02, 8.12221693e+02, 3.80421798e-01]]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Make the desired numpy array:\n",
    "\n",
    "# Populate individuals without values to -9999, later we will replace -9999 with NA\n",
    "\n",
    "for a in range(animals_array.size):\n",
    "    tmp_animal = ind.loc[ind['id'] == animals_array[a]]\n",
    "    for t in range(times_array.size):\n",
    "        tmp = tmp_animal.loc[ind['frame'] == times_array[t]]\n",
    "# For each timestamp for each unique animal, get thr centroid_x and centroid_y        \n",
    "        if tmp.empty:\n",
    "            # Some individuals are not observed at every single timestap, so we will fill their rows with -9999 in their location values\n",
    "            total_array[t,a,0] = -99999\n",
    "            total_array[t,a,1] = -99999\n",
    "        else:\n",
    "            total_array[t,a,0] = tmp['pos_x'].iloc[0]\n",
    "            total_array[t,a,1] = tmp['pos_y'].iloc[0]\n",
    "            total_array[t,a,2] = tmp['speed'].iloc[0]\n",
    "            \n",
    "    print(a)\n",
    "    \n",
    "flock_arr = total_array\n",
    "# Replace -99999 with NA \n",
    "flock_arr = np.where(flock_arr == -99999, np.NAN, flock_arr)\n",
    "flock_arr.shape\n",
    "flock_arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "eedc23ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'x': [460.0, 1421.88096122879], 'y': [63.1873132301005, 1016.48679012346]}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set the domain, the bounding box based on which we will situate the locaiton of our chords and notes\n",
    "\n",
    "domains_individuals = {'x': [\n",
    "    ind['pos_x'].min(),\n",
    "    ind['pos_x'].max()\n",
    "], 'y': [\n",
    "    ind['pos_y'].min(),\n",
    "    ind['pos_y'].max()\n",
    "]}\n",
    "\n",
    "error_term = 0.01\n",
    "# col.head()\n",
    "\n",
    "\n",
    "domains = domains_individuals\n",
    "domains"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "397847b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 460.          556.18809612  652.37619225  748.56428837  844.75238449\n",
      "  940.94048061 1037.12857674 1133.31667286 1229.50476898 1325.69286511]\n",
      "[ 63.18731323 158.51726092 253.84720861 349.1771563  444.50710399\n",
      " 539.83705168 635.16699937 730.49694706 825.82689474 921.15684243]\n",
      "[95, 98, 103, 107, 110, 115, 119, 122, 127]\n"
     ]
    }
   ],
   "source": [
    "# To do: Different chrod progressions for different collective states\n",
    "\n",
    "import random\n",
    "import numpy as np\n",
    "\n",
    "# Start adding the musical grid\n",
    "\n",
    "\n",
    "# identify available pitch steps within chromatic scale\n",
    "\n",
    "'''\n",
    "c  0\n",
    "c# 1\n",
    "d  2\n",
    "d# 3\n",
    "e  4\n",
    "f  5\n",
    "f# 6\n",
    "g  7\n",
    "g# 8\n",
    "a  9\n",
    "a# 10\n",
    "b  11\n",
    "'''\n",
    "\n",
    "base_steps = [0, 4, 7] # For simplicity only C, E and G. Root\n",
    "# base_steps = [0, 2, 4, 5, 7, 9, 11]\n",
    "# base_steps = [11, 2, 7] # B, D, G # First inversion\n",
    "base_steps = [59, 62, 67] # B, D, G # First inversion\n",
    "\n",
    "\n",
    "# Here's a more musical version:\n",
    "# Chord I (root) (C, 60; E, 64; G, 67),\n",
    "# Chord V (first inversion) (B, 59; D, 62; G, 67),\n",
    "# Chord VI (First inversion (C, 60; E, 64; A, 69),\n",
    "# Chord IV (second inversion) (C, 60; F, 65; A, 69)\n",
    "\n",
    "\n",
    "steps = []\n",
    "for octave in [3,4,5]: # Account for octaves\n",
    "    steps += [i+(octave*12) for i in base_steps]\n",
    "\n",
    "    \n",
    "# Make a pitch grid:\n",
    "    \n",
    "# identify the number of distinct pitches in each dimension\n",
    "n_x_stops = 10\n",
    "n_y_stops = 10\n",
    "\n",
    "# quantize out a grid\n",
    "x_stops = np.linspace(domains['x'][0], domains['x'][1], num=n_x_stops, endpoint=False)\n",
    "y_stops = np.linspace(domains['y'][0], domains['y'][1], num=n_y_stops, endpoint=False)\n",
    "\n",
    "\n",
    "print(x_stops)\n",
    "print(y_stops)\n",
    "# create the coordinate grid\n",
    "coord_grid = np.array(np.meshgrid(x_stops, y_stops)).T\n",
    "\n",
    "print(steps)\n",
    "\n",
    "# create the grid of pitch steps\n",
    "pitch_grid = np.zeros((n_x_stops, n_y_stops))\n",
    "kdx = 0\n",
    "for idx, i in enumerate(pitch_grid):\n",
    "    for jdx, j in enumerate(i):\n",
    "        pitch_grid[idx, jdx] = steps[kdx]\n",
    "        kdx = kdx+1\n",
    "        if kdx >= len(steps): kdx = 0\n",
    "pitch_grid = pitch_grid.astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8a17a452",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply k-means clustering to our dataset to split our group into 3s that will become keys of a keyboard.\n",
    "\n",
    "from sklearn.cluster import KMeans\n",
    "from collections import defaultdict\n",
    "\n",
    "m = mido.MidiFile()\n",
    "m.tracks.append(mido.MidiTrack())\n",
    "err = 0.001\n",
    "step = 1 # how often to sample frames\n",
    "time_scalar = 12 # beats per unit in i\n",
    "times = {i: 0 for i in steps} # d[note] = time the note was pressed\n",
    "pressed = {i: False for i in steps} # d[note] = pressed or not\n",
    "positions = [] # [[list of x,y positions in pitch space for frame]]\n",
    "C_t = 6 # Sets maximum length a note can be played\n",
    "\n",
    "# only process the first n frames to expedite\n",
    "n_frames = 1000\n",
    "for idx, i in enumerate(flock_arr[:n_frames]): # time\n",
    "    if idx % step != 0: continue\n",
    "    if np.any(np.isnan(i)) == True: \n",
    "        continue\n",
    "  # we can access other variables in i (which is a single time step in our dataframe\n",
    "    speeds = i[:,2]\n",
    "    if np.any(speeds < 0.0): print(' * got negative speeds')\n",
    "  # fit kmeans on x,y (lat,lng)\n",
    "    model = KMeans(n_clusters=3).fit(i[:,:2])   \n",
    "    frame_centroids = model.cluster_centers_\n",
    "\n",
    "  # find the centroid to which each animal belongs - keys are cluster indices; vals are animal indices\n",
    "    cluster_dict = defaultdict(list)\n",
    "    for jdx, j in enumerate(model.labels_):\n",
    "        cluster_index = j\n",
    "        animal_index = jdx\n",
    "        cluster_dict[cluster_index].append(animal_index)\n",
    "\n",
    "  # find the list of speeds for each cluster - keys are cluster indices, vals are mean speeds\n",
    "    speeds_dict = {}\n",
    "    for cluster_index in cluster_dict:\n",
    "        animal_indices = cluster_dict[cluster_index]\n",
    "        cluster_speeds = speeds[animal_indices]\n",
    "        speeds_dict[cluster_index] = np.mean(cluster_speeds)\n",
    "\n",
    "  # convert the k flock centroid positions to notes\n",
    "    frame_notes = []\n",
    "    frame_positions = []\n",
    "  # jdx is cluster centroid, j is x,y coords of centroid\n",
    "    for jdx, j in enumerate(frame_centroids):\n",
    "        x, y = j\n",
    "\n",
    "        # now we can pass the speed as the time scalar\n",
    "        speed = abs(speeds_dict[jdx])\n",
    "        # find the index offsets of x, y in the coords grid\n",
    "        x_pos = np.where(x_stops - err < x)[0][-1]\n",
    "        y_pos = np.where(y_stops - err < y)[0][-1]\n",
    "        # get the pitch that corresponds with the centroid\n",
    "        # FOr each time get xy for each centroid and append that to a pitch grid.\n",
    "        #\n",
    "        frame_notes.append( pitch_grid[x_pos, y_pos] )\n",
    "        frame_positions.append([x_pos, y_pos])\n",
    "\n",
    "    positions.append(frame_positions)\n",
    "    # end each played note that's not in the new notes\n",
    "    for note in pressed:\n",
    "        if not pressed[note]: continue\n",
    "        if note not in frame_notes:\n",
    "            # Each note affects the speed at hich a key is pressed \n",
    "            m.tracks[0].append( mido.Message('note_off', note=note, velocity = int(np.round(64)), time=int(np.round(idx*time_scalar))))\n",
    "            pressed[note] = False\n",
    "        #If note was pressed C_t time steps ago unpress it\n",
    "        if idx - times[note] > C_t:\n",
    "            m.tracks[0].append( mido.Message('note_off', note=note, velocity = int(np.round(64)), time=int(np.round(idx*time_scalar))))\n",
    "            pressed[note] = False\n",
    "  # add the new notes\n",
    "    for note in frame_notes:\n",
    "        if not pressed[note]:\n",
    "            pressed[note] = True\n",
    "            # if you unindent, notes will be pressed continuously \n",
    "            times[note] = idx\n",
    "            m.tracks[0].append( mido.Message('note_on', note=note, velocity = int(np.round(64+2*speed)), time=int(np.round(idx*time_scalar)) ))\n",
    "# close all open notes\n",
    "for note in pressed:\n",
    "    if not pressed[note]: continue\n",
    "    m.tracks[0].append( mido.Message('note_off', note=note, velocity = int(np.round(64)), time=int(idx*time_scalar)) )\n",
    "      # Midi has note on off concept, press a certain note of the keyboard at a certain time and the note off releases the key\n",
    "# convert times to relative offsets\n",
    "# press. a note\n",
    "last_time = 0\n",
    "for i in m.tracks[0]:\n",
    "    t = i.time\n",
    "    i.time = i.time - last_time\n",
    "\n",
    "last_time = t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f376b131",
   "metadata": {},
   "outputs": [],
   "source": [
    "m.tracks[0].insert(0, mido.MetaMessage('set_tempo', tempo=990))\n",
    "m.ticks_per_beat = 300\n",
    "m.save('/Users/diegoellis//Desktop/termite_music_2022_B_D_G_2.mid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ac32e8af",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f212b89",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
